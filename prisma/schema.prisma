// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Configuration Tables
model TimeframeConfig {
  id            String        @id @default(uuid())
  name          String        @db.VarChar(50)
  displayOrder  Int
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  journalEntries JournalEntry[]

  @@map("timeframe_configs")
}

model PatternConfig {
  id            String        @id @default(uuid())
  name          String        @db.VarChar(100)
  description   String?
  displayOrder  Int
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  journalEntries JournalEntry[]

  @@map("pattern_configs")
}

model TooltipConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  text        String   @db.VarChar(200)
  maxLength   Int      @default(50) @map("max_length")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("tooltip_configs")
}

model SourceConfig {
  id            String        @id @default(uuid())
  name          String        @db.VarChar(100)
  description   String?
  displayOrder  Int
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  ideas         Idea[]
  trades        Trade[]

  @@map("source_configs")
}

model StrategyConfig {
  id                        String        @id @default(uuid())
  name                      String        @db.VarChar(100)
  tagValue                  String        @db.VarChar(50) @map("tag_value")
  sourcingValues            Json?         @map("sourcing_values")
  recordingSystem           String?       @db.VarChar(500) @map("recording_system")
  enterCriteria             String?       @db.VarChar(500) @map("enter_criteria")
  earlyEntryCriteria        String?       @db.VarChar(500) @map("early_entry_criteria")
  exitCriteria              String?       @db.VarChar(500) @map("exit_criteria")
  confirmationCriteria      String?       @db.VarChar(500) @map("confirmation_criteria")
  qualityConsiderations     String?       @db.VarChar(500) @map("quality_considerations")
  qualityCriteria           String?       @db.VarChar(500) @map("quality_criteria")
  kaizen                    String?       @db.VarChar(500)
  executionReviewCriteria   String?       @db.VarChar(500) @map("execution_review_criteria")
  retrospectivePeriod       Int?          @map("retrospective_period")
  taggingSystem             String?       @db.VarChar(500) @map("tagging_system")
  displayOrder              Int
  isActive                  Boolean       @default(true)
  pendingReview             Boolean       @default(false) @map("pending_review")
  createdAt                 DateTime      @default(now()) @map("created_at")
  updatedAt                 DateTime      @updatedAt @map("updated_at")
  ideas                     Idea[]

  @@map("strategy_configs")
}

model TagConfig {
  id            String        @id @default(uuid())
  name          String        @db.VarChar(100)
  category      String        @db.VarChar(50)
  description   String?       @db.VarChar(500)
  displayOrder  Int
  isActive      Boolean       @default(true)
  pendingReview Boolean       @default(false) @map("pending_review")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")

  // Trade relations
  tradesSetup1  Trade[]       @relation("TradeSetup1")
  tradesSetup2  Trade[]       @relation("TradeSetup2")
  tradesSetup3  Trade[]       @relation("TradeSetup3")
  tradesSetup4  Trade[]       @relation("TradeSetup4")
  tradesSetup5  Trade[]       @relation("TradeSetup5")
  tradesSetup6  Trade[]       @relation("TradeSetup6")
  tradesSetup7  Trade[]       @relation("TradeSetup7")
  tradesMistake1 Trade[]      @relation("TradeMistake1")
  tradesMistake2 Trade[]      @relation("TradeMistake2")
  tradesMistake3 Trade[]      @relation("TradeMistake3")
  tradesMistake4 Trade[]      @relation("TradeMistake4")
  tradesMistake5 Trade[]      @relation("TradeMistake5")

  @@map("tag_configs")
}

// Ideas Configuration
model IdeasExpiryConfig {
  id          String   @id @default(uuid())
  expiryDays  Int      @default(365) @map("expiry_days")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("ideas_expiry_config")
}

model StockMultiplierConfig {
  id          String   @id @default(uuid())
  ticker      String   @unique @db.VarChar(20)
  multiplier  Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("stock_multiplier_configs")
}

// Main Journal Entries Table
model JournalEntry {
  id                      String        @id @default(uuid())
  createdAt              DateTime      @default(now()) @map("created_at")
  updatedAt              DateTime      @updatedAt @map("updated_at")
  entryDate              DateTime      @map("entry_date")
  ticker                 String        @db.VarChar(20)
  price                  Decimal       @db.Decimal(10, 2)
  timeframe              TimeframeConfig? @relation(fields: [timeframeId], references: [id])
  timeframeId            String?       @map("timeframe_id")
  direction              Direction
  sentiment              Sentiment
  pattern                PatternConfig? @relation(fields: [patternId], references: [id])
  patternId              String?       @map("pattern_id")
  support                Decimal?      @db.Decimal(10, 2)
  resistance             Decimal?      @db.Decimal(10, 2)
  comments               String?
  gamePlan               String?       @map("game_plan")
  isWeeklyOnePagerEligible Boolean     @default(false) @map("is_weekly_one_pager_eligible")
  
  // Retrospectives
  retro7DStatus          RetroStatus   @default(pending) @map("retro_7d_status")
  retro7DCompletedAt     DateTime?     @map("retro_7d_completed_at")
  retro7DOutcome         RetroOutcome? @map("retro_7d_outcome")
  retro7DNotes           String?       @map("retro_7d_notes")
  
  retro30DStatus         RetroStatus   @default(pending) @map("retro_30d_status")
  retro30DCompletedAt    DateTime?     @map("retro_30d_completed_at")
  retro30DOutcome        RetroOutcome? @map("retro_30d_outcome")
  retro30DNotes          String?       @map("retro_30d_notes")

  @@map("journal_entries")
  @@index([entryDate])
  @@index([ticker])
  @@index([timeframeId])
  @@index([patternId])
}

// Ideas Table
model Idea {
  id                String        @id @default(uuid())
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  ticker            String        @db.VarChar(20)
  date              DateTime      @default(now())
  currentPrice      Decimal       @map("current_price") @db.Decimal(10, 2)
  targetEntry       Decimal       @map("target_entry") @db.Decimal(10, 2)
  targetPrice       Decimal       @map("target_price") @db.Decimal(10, 2)
  stop              Decimal       @db.Decimal(10, 2)
  rrRatio           Decimal       @map("rr_ratio") @db.Decimal(5, 2)
  tradeDirection    TradeDirection @map("trade_direction")
  strategy          StrategyConfig? @relation(fields: [strategyId], references: [id])
  strategyId        String?       @map("strategy_id")
  market            MarketDirection
  relative          Decimal       @db.Decimal(5, 2)
  oneHourTrend      TrendDirection @map("one_hour_trend")
  oneHourCloud      CloudPosition @map("one_hour_cloud")
  intendedPosition  Int           @map("intended_position")
  toWinMoney        Decimal       @map("to_win_money") @db.Decimal(12, 2)
  moneyRisk         Decimal       @map("money_risk") @db.Decimal(12, 2)
  notes             String?
  sourced           SourceConfig? @relation(fields: [sourceId], references: [id])
  sourceId          String?       @map("source_id")
  quality           Quality
  status            IdeaStatus    @default(active)
  tradeId           String?       @map("trade_id")
  expiresAt         DateTime      @map("expires_at")

  @@map("ideas")
  @@index([ticker])
  @@index([date])
  @@index([status])
  @@index([expiresAt])
}

// Enums
enum Direction {
  Bullish
  Bearish
}

enum Sentiment {
  Bullish
  Neutral
  Bearish
}

enum RetroStatus {
  pending
  completed
  overdue
}

enum RetroOutcome {
  win
  loss
}

// Ideas Enums
enum TradeDirection {
  Long
  Short
}

enum MarketDirection {
  Bullish
  Bearish
}

enum TrendDirection {
  Bullish
  Bearish
}

enum CloudPosition {
  Above
  Below
}

enum Quality {
  HQ
  MQ
  LQ
}

enum IdeaStatus {
  active
  inactive
  expired
}

// Trade Log Models
model Trade {
  id                String        @id @default(uuid())
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  
  // Required fields (marked with *)
  status            TradeStatus   @default(OPEN)
  tradeId           Int           @unique @map("trade_id") // Auto-incrementing ID
  ticker            String        @db.VarChar(20)
  source            SourceConfig? @relation(fields: [sourceId], references: [id])
  sourceId          String?       @map("source_id")
  size              Decimal       @db.Decimal(12, 2)
  openDate          DateTime      @map("open_date")
  
  // Optional fields
  closeDate         DateTime?     @map("close_date")
  
  // Setup tags (1-7)
  setup1            TagConfig?    @relation("TradeSetup1", fields: [setup1Id], references: [id])
  setup1Id          String?     @map("setup_1_id")
  setup2            TagConfig?    @relation("TradeSetup2", fields: [setup2Id], references: [id])
  setup2Id          String?     @map("setup_2_id")
  setup3            TagConfig?    @relation("TradeSetup3", fields: [setup3Id], references: [id])
  setup3Id          String?     @map("setup_3_id")
  setup4            TagConfig?    @relation("TradeSetup4", fields: [setup4Id], references: [id])
  setup4Id          String?     @map("setup_4_id")
  setup5            TagConfig?    @relation("TradeSetup5", fields: [setup5Id], references: [id])
  setup5Id          String?     @map("setup_5_id")
  setup6            TagConfig?    @relation("TradeSetup6", fields: [setup6Id], references: [id])
  setup6Id          String?     @map("setup_6_id")
  setup7            TagConfig?    @relation("TradeSetup7", fields: [setup7Id], references: [id])
  setup7Id          String?     @map("setup_7_id")
  
  // Mistake tags (1-5)
  mistake1          TagConfig?    @relation("TradeMistake1", fields: [mistake1Id], references: [id])
  mistake1Id        String?     @map("mistake_1_id")
  mistake2          TagConfig?    @relation("TradeMistake2", fields: [mistake2Id], references: [id])
  mistake2Id        String?     @map("mistake_2_id")
  mistake3          TagConfig?    @relation("TradeMistake3", fields: [mistake3Id], references: [id])
  mistake3Id        String?     @map("mistake_3_id")
  mistake4          TagConfig?    @relation("TradeMistake4", fields: [mistake4Id], references: [id])
  mistake4Id        String?     @map("mistake_4_id")
  mistake5          TagConfig?    @relation("TradeMistake5", fields: [mistake5Id], references: [id])
  mistake5Id        String?     @map("mistake_5_id")
  
  // Price fields
  entryPrice        Decimal?      @map("entry_price") @db.Decimal(10, 2)
  exitPrice         Decimal?      @map("exit_price") @db.Decimal(10, 2)
  avgBuy            Decimal?      @map("avg_buy") @db.Decimal(10, 2)
  avgSell           Decimal?      @map("avg_sell") @db.Decimal(10, 2)
  
  // Required fields
  side              TradeSide
  type              TradeType
  
  // Calculated fields
  netReturn         Decimal?      @map("net_return") @db.Decimal(12, 2)
  netReturnPercent  Decimal?      @map("net_return_percent") @db.Decimal(8, 4)
  mae               Decimal?      @db.Decimal(10, 2) // Maximum Adverse Excursion
  mfe               Decimal?      @db.Decimal(10, 2) // Maximum Favorable Excursion
  bestExitDollar    Decimal?      @map("best_exit_dollar") @db.Decimal(12, 2)
  bestExitPercent   Decimal?      @map("best_exit_percent") @db.Decimal(8, 4)
  missedExit        Decimal?      @map("missed_exit") @db.Decimal(12, 2)
  
  // Import tracking
  importSource      String?       @map("import_source") @db.VarChar(50) // 'manual', 'tradersync', 'thinkorswim'
  importData        Json?         @map("import_data") // Store original import data
  
  // Sub-orders for multiple executions
  subOrders         TradeSubOrder[]
  
  @@map("trades")
  @@index([tradeId])
  @@index([ticker])
  @@index([status])
  @@index([openDate])
  @@index([closeDate])
}

model TradeSubOrder {
  id                String        @id @default(uuid())
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  
  trade             Trade         @relation(fields: [tradeId], references: [id], onDelete: Cascade)
  tradeId           String        @map("trade_id")
  
  // Order details
  orderType         SubOrderType  @map("order_type")
  quantity          Decimal       @db.Decimal(12, 2)
  price             Decimal       @db.Decimal(10, 2)
  orderDate         DateTime      @map("order_date")
  
  // Optional fields
  notes             String?
  
  @@map("trade_sub_orders")
  @@index([tradeId])
  @@index([orderDate])
}

// Trade Enums
enum TradeStatus {
  OPEN
  CLOSED
  WIN
  LOSS
}

enum TradeSide {
  LONG
  SHORT
}

enum TradeType {
  SHARE
  OPTION
}

enum SubOrderType {
  BUY
  SELL
  ADD_TO_POSITION
  REDUCE_POSITION
} 