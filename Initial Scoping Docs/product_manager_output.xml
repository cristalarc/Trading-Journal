<?xml version="1.0" encoding="UTF-8"?>
<DataStructureAndRequirements>
    <!-- ===========================
         CORE JOURNAL ENTRY FIELDS
         =========================== -->
    <CoreJournalEntryFields>
        <EntryDate>
            <Description>The date when the comment/analysis is made.</Description>
        </EntryDate>
        <RelevantWeekCalculation>
            <Description>
                Automatically derive and store the “relevant week” based on the entry date. 
                For example, if an entry is made on Sunday of Week 39, tag it as relevant for Week 40.
            </Description>
        </RelevantWeekCalculation>
        <Ticker>
            <Description>The stock symbol (e.g., AAPL, TSLA).</Description>
        </Ticker>
        <CurrentPrice>
            <Description>
                Fetched via an API at the time of entry creation. 
                Price is cached for historical reference.
            </Description>
        </CurrentPrice>
        <Timeframe>
            <Description>
                Specifies the perspective of the analysis (hourly, daily, or weekly).
            </Description>
        </Timeframe>
        <Direction>
            <Description>Bullish or Bearish.</Description>
        </Direction>
        <Sentiment>
            <Description>
                Bullish or Bearish. May overlap with Direction but can be used differently
                (e.g., direction is technical stance, sentiment is qualitative).
            </Description>
        </Sentiment>
        <SentimentType>
            <Description>Technical or Fundamental reasoning.</Description>
        </SentimentType>
        <GoverningPattern>
            <Description>
                A dropdown of user-defined patterns (e.g., "Head & Shoulders", "Cup & Handle").
            </Description>
        </GoverningPattern>
        <KeySupportLevel>
            <Description>Numerical price level input by the user.</Description>
        </KeySupportLevel>
        <KeyResistanceLevel>
            <Description>Numerical price level input by the user.</Description>
        </KeyResistanceLevel>
        <Comments>
            <Description>Free-text field for the user’s initial thoughts.</Description>
        </Comments>
        <UpdatesToComments>
            <Description>
                Ability to append daily updates to the existing entry (comment thread or versioning).
            </Description>
        </UpdatesToComments>
        <Retrospective7D>
            <Description>
                After 7 days, user marks “Win” or “Lose.” Field locked until 7 days pass.
            </Description>
        </Retrospective7D>
        <Retrospective30D>
            <Description>
                After 30 days, user marks “Win” or “Lose.” Field locked until 30 days pass.
            </Description>
        </Retrospective30D>
        <WeeklyOnePagerToggle>
            <Description>
                Boolean field to indicate if this entry appears in the Weekly One Pager summary.
            </Description>
        </WeeklyOnePagerToggle>
        <IsFollowUpToOpenTrade>
            <Description>
                Boolean to mark if this journal entry corresponds to an open trade in the user’s portfolio.
            </Description>
        </IsFollowUpToOpenTrade>
    </CoreJournalEntryFields>

    <!-- ===============================
         MULTI-TIMEFRAME PERSPECTIVE
         =============================== -->
    <MultiTimeframePerspective>
        <Description>
            Entries are created per timeframe (hourly, daily, weekly) so a single ticker
            can have multiple active entries. Group entries by ticker and timeframe, 
            providing filters and grouping in the UI.
        </Description>
        <Structure>
            <JournalEntryTableLinkingToTicker/>
            <TimeframeFieldMultipleEntriesPerTicker/>
            <FiltersAndGroupingInUI/>
        </Structure>
    </MultiTimeframePerspective>

    <!-- =================================
         WORKFLOW AND USER INTERACTION
         ================================= -->
    <WorkflowAndUserInteraction>
        <!-- Creating an Entry -->
        <CreatingAnEntry>
            <Steps>
                <Step>User selects a ticker (or searches for one).</Step>
                <Step>System fetches current price via API and displays it.</Step>
                <Step>User selects timeframe, direction, sentiment, sentiment type, and pattern.</Step>
                <Step>User inputs support/resistance levels, comments.</Step>
                <Step>User decides if it’s in the Weekly One Pager and if it’s a follow-up to an open trade.</Step>
                <Step>On save, entry date and relevant week are recorded.</Step>
            </Steps>
        </CreatingAnEntry>
        <!-- Updating an Entry -->
        <UpdatingAnEntry>
            <Description>
                User can revisit the entry to add daily updates (sub-comments, logs).
            </Description>
        </UpdatingAnEntry>
        <!-- Retrospective Updates -->
        <RetrospectiveUpdates>
            <Description>
                After 7 days, prompt user for 7D retrospective. 
                After 30 days, prompt user for 30D retrospective.
            </Description>
        </RetrospectiveUpdates>
    </WorkflowAndUserInteraction>

    <!-- =======================
         FILTERING & VIEWING
         ======================= -->
    <FilteringAndViewing>
        <Description>
            Users can filter by ticker, timeframe, week, or sentiment.
            A calendar or timeline view could help visualize when entries were created.
        </Description>
        <ExampleView>
            <TickerView>AAPL</TickerView>
            <Tabs>
                <WeeklyAnalysisTab>
                    Shows all weekly entries with support, resistance, comments, etc.
                </WeeklyAnalysisTab>
                <DailyAnalysisTab>
                    Shows daily entries with retrospective notes.
                </DailyAnalysisTab>
                <HourlyAnalysisTab>
                    Shows hourly entries for granular commentary.
                </HourlyAnalysisTab>
            </Tabs>
        </ExampleView>
    </FilteringAndViewing>

    <!-- ======================
         UI/UX CONSIDERATIONS
         ====================== -->
    <UIUXConsiderations>
        <!-- Visual Layout -->
        <VisualLayout>
            <Description>
                Use a clean, card-based design. Highlight key fields (direction, sentiment, price). 
                Label timeframe, follow-up trade status, and Weekly One Pager inclusion.
            </Description>
        </VisualLayout>
        <!-- Inline Editing & Updates -->
        <InlineEditingAndUpdates>
            <Description>
                Allow quick daily updates without navigating away. 
                Make it visually distinct when retrospective is due.
            </Description>
        </InlineEditingAndUpdates>
        <!-- Navigation & Discovery -->
        <NavigationAndDiscovery>
            <Description>
                Provide a sidebar or top nav for switching sections. 
                Include a search bar and filters by timeframe, ticker, etc.
            </Description>
        </NavigationAndDiscovery>
        <!-- Guided Inputs -->
        <GuidedInputs>
            <Description>
                Offer tooltips or hints for fields like Governing Pattern, Sentiment Type.
                Use validation (e.g., numeric checks for price).
            </Description>
        </GuidedInputs>
    </UIUXConsiderations>

    <!-- ============================
         TECHNICAL CONSIDERATIONS
         ============================ -->
    <TechnicalConsiderations>
        <!-- API Integration -->
        <APIIntegration>
            <Description>
                Store historical prices via snapshot at entry creation. 
                Handle API delays/failures with fallback manual price entry.
            </Description>
        </APIIntegration>
        <!-- Data Modeling -->
        <DataModeling>
            <Description>
                Consider separate tables for JournalEntries, JournalEntryUpdates, Patterns, Tickers. 
                Each JournalEntry can have multiple JournalEntryUpdates.
            </Description>
        </DataModeling>
        <!-- Performance & Scalability -->
        <PerformanceAndScalability>
            <Description>
                Index Ticker, Date, Timeframe fields for quick lookups. 
                Use pagination or lazy loading for large histories.
            </Description>
        </PerformanceAndScalability>
    </TechnicalConsiderations>

    <!-- ========================
         ITERATIVE ROLLOUT PLAN
         ======================== -->
    <IterativeRolloutPlan>
        <Phase1MVP>
            <Features>
                <Feature>Basic journal entry creation with all fields except retrospectives.</Feature>
                <Feature>Daily updates.</Feature>
                <Feature>Filtering by ticker and timeframe.</Feature>
            </Features>
        </Phase1MVP>
        <Phase2>
            <Features>
                <Feature>Add 7D and 30D retrospective fields and automated reminders.</Feature>
                <Feature>Improve UI with tabbed ticker view and advanced filtering.</Feature>
            </Features>
        </Phase2>
        <Phase3>
            <Features>
                <Feature>Integrate with Weekly One Pager view.</Feature>
                <Feature>Add richer analytics (showing performance vs. sentiment predictions).</Feature>
            </Features>
        </Phase3>
    </IterativeRolloutPlan>

    <!-- ==================
         FUTURE EXTENSIONS
         ================== -->
    <FutureExtensions>
        <Extension>
            Integrate journal entries with order processing to link analysis with actual trades.
        </Extension>
        <Extension>
            Ability to attach screenshots or charts to entries.
        </Extension>
        <Extension>
            Add recommendation engine or pattern recognition to suggest improvements 
            based on retrospective outcomes.
        </Extension>
    </FutureExtensions>

</DataStructureAndRequirements>
